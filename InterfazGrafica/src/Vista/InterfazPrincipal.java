/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

//import FileTreeCellRenderer;



import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Desktop;
import java.io.File;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import Analizadores.LeerPdf;
import Analizadores.LeerPP;
import Analizadores.LeerRTF;
import Analizadores.LeerTexto;
import Analizadores.LeerW;
import BKmeans.ClusterWithMeanID;
import BaseDatos.DataBase;
import Controlador.Controlador;
import Modelo.Preprocesamiento;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import javax.swing.JComboBox;
import javax.swing.JRadioButton;
import javax.swing.tree.TreeModel;
import javax.swing.text.rtf.*;
import java.nio.file.Files;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Enumeration;
import javax.swing.JFrame;

/**
 *
 * @author Alejandro
 */
public class InterfazPrincipal extends javax.swing.JFrame implements TreeSelectionListener{

    /**
     * Creates new form Principal
     */
    Controlador controlador;
    public static int contadorArchivos=0;
    public static int totalArchivos=0;
    
    private Desktop desktop;
    private FileSystemView fileSystemView;      
    private DefaultTreeModel treeModel;
    private ModeloTabla modelotabla;
    boolean banderaArchivosRepetidos;
    DefaultMutableTreeNode nodoActual;
    File file ;
    
    ArrayList<File> seleccion = new ArrayList<>();
    ArrayList<File> resulBusqueda = new ArrayList<>();
    
    private static String OS;
    
    SwingWorker<Void, File[]> worker;
    SwingWorker<Void, File> workerArbol;
    int progreso;

    long startTimestamp; // the start time of the latest execution
    long endTimestamp;  // the end time of the latest execution
    int k;

    int minPts;
    double epsilon;
    
    List<ClusterWithMeanID> clustersID;
    
    
    
    public InterfazPrincipal() {
        controlador = new Controlador();
        
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
       
        inicializarArbol();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        Organizar = new javax.swing.JPanel();
        Tarjetas = new javax.swing.JPanel();
        GestionArchivos = new javax.swing.JPanel();
        panelEntrada = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        añadirSeleccionado = new javax.swing.JButton();
        panelTabla = new javax.swing.JPanel();
        solicitarSugerencia = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        coleccion = new javax.swing.JTable();
        descartarArchivo = new javax.swing.JButton();
        limpiarSeleccion = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        SugerenciaOrganizacion = new javax.swing.JPanel();
        panelSugerencia = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        sugerencia = new javax.swing.JTree();
        aplicarClasificacion = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        dirSalida = new javax.swing.JTextField();
        panelTabla2 = new javax.swing.JPanel();
        solicitarSugerencia1 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabla1 = new javax.swing.JTable();
        Buscar = new javax.swing.JPanel();
        busquedaArchivos = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tarjetasBuscar = new javax.swing.JPanel();
        busquedaNoExtension = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        terminoBuscar = new javax.swing.JTextField();
        busquedaExtension = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        comboTipo = new javax.swing.JComboBox<>();
        bContenido = new javax.swing.JRadioButton();
        bNombre = new javax.swing.JRadioButton();
        bExtension = new javax.swing.JRadioButton();
        resultadoBusqueda = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resBusqueda = new javax.swing.JTable();
        buscarCancelar = new javax.swing.JButton();
        panelEstado = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        labelStatus = new javax.swing.JLabel();
        labelStatus1 = new javax.swing.JLabel();
        progressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Herramienta de gestion de archivos de texto basado en analisis de contenido");
        setBackground(new java.awt.Color(153, 0, 0));
        setSize(new java.awt.Dimension(0, 0));

        Tarjetas.setLayout(new java.awt.CardLayout());

        GestionArchivos.setBorder(javax.swing.BorderFactory.createTitledBorder("Gestión de Archivos"));

        panelEntrada.setBorder(javax.swing.BorderFactory.createTitledBorder("Entrada"));
        panelEntrada.setMaximumSize(new java.awt.Dimension(300, 32767));
        panelEntrada.setMinimumSize(new java.awt.Dimension(300, 0));

        tree.setToolTipText("");
        tree.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                treeFocusLost(evt);
            }
        });
        tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                treeMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                treeMousePressed(evt);
            }
        });
        tree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                treeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                treeKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                treeKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(tree);

        añadirSeleccionado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/add.png"))); // NOI18N
        añadirSeleccionado.setText("Añadir a selección");
        añadirSeleccionado.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        añadirSeleccionado.setMaximumSize(new java.awt.Dimension(150, 23));
        añadirSeleccionado.setMinimumSize(new java.awt.Dimension(150, 23));
        añadirSeleccionado.setPreferredSize(new java.awt.Dimension(150, 23));
        añadirSeleccionado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                añadirSeleccionadoFocusGained(evt);
            }
        });
        añadirSeleccionado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadirSeleccionadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelEntradaLayout = new javax.swing.GroupLayout(panelEntrada);
        panelEntrada.setLayout(panelEntradaLayout);
        panelEntradaLayout.setHorizontalGroup(
            panelEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEntradaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEntradaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(añadirSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        panelEntradaLayout.setVerticalGroup(
            panelEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEntradaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(añadirSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelTabla.setBorder(javax.swing.BorderFactory.createTitledBorder("Archivos seleccionados para organizar"));

        solicitarSugerencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/next.png"))); // NOI18N
        solicitarSugerencia.setText("Solicitar sugerencia organización");
        solicitarSugerencia.setEnabled(false);
        solicitarSugerencia.setMaximumSize(new java.awt.Dimension(225, 23));
        solicitarSugerencia.setMinimumSize(new java.awt.Dimension(225, 23));
        solicitarSugerencia.setPreferredSize(new java.awt.Dimension(225, 23));
        solicitarSugerencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solicitarSugerenciaActionPerformed(evt);
            }
        });

        coleccion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "", "Archivo", "Ruta", "Peso", "Modificacion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        coleccion.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        coleccion.setSurrendersFocusOnKeystroke(true);
        coleccion.getTableHeader().setReorderingAllowed(false);
        coleccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                coleccionKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(coleccion);

        descartarArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/delete.png"))); // NOI18N
        descartarArchivo.setText("Descartar archivo");
        descartarArchivo.setEnabled(false);
        descartarArchivo.setMaximumSize(new java.awt.Dimension(225, 23));
        descartarArchivo.setMinimumSize(new java.awt.Dimension(225, 23));
        descartarArchivo.setPreferredSize(new java.awt.Dimension(150, 23));
        descartarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descartarArchivoActionPerformed(evt);
            }
        });

        limpiarSeleccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/escoba.png"))); // NOI18N
        limpiarSeleccion.setText("Limpiar Selección");
        limpiarSeleccion.setEnabled(false);
        limpiarSeleccion.setMaximumSize(new java.awt.Dimension(225, 23));
        limpiarSeleccion.setMinimumSize(new java.awt.Dimension(225, 23));
        limpiarSeleccion.setPreferredSize(new java.awt.Dimension(150, 23));
        limpiarSeleccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarSeleccionActionPerformed(evt);
            }
        });

        cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cancel_1.png"))); // NOI18N
        cancelar.setText("Cancelar");
        cancelar.setEnabled(false);
        cancelar.setMaximumSize(new java.awt.Dimension(225, 41));
        cancelar.setMinimumSize(new java.awt.Dimension(225, 41));
        cancelar.setPreferredSize(new java.awt.Dimension(225, 30));
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTablaLayout = new javax.swing.GroupLayout(panelTabla);
        panelTabla.setLayout(panelTablaLayout);
        panelTablaLayout.setHorizontalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(panelTablaLayout.createSequentialGroup()
                        .addComponent(limpiarSeleccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(descartarArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(solicitarSugerencia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelTablaLayout.setVerticalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cancelar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(limpiarSeleccion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descartarArchivo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(solicitarSugerencia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout GestionArchivosLayout = new javax.swing.GroupLayout(GestionArchivos);
        GestionArchivos.setLayout(GestionArchivosLayout);
        GestionArchivosLayout.setHorizontalGroup(
            GestionArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GestionArchivosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 961, Short.MAX_VALUE)
                .addContainerGap())
        );
        GestionArchivosLayout.setVerticalGroup(
            GestionArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GestionArchivosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GestionArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTabla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        Tarjetas.add(GestionArchivos, "card2");

        panelSugerencia.setBorder(javax.swing.BorderFactory.createTitledBorder("Sugerencia de organización"));
        panelSugerencia.setMaximumSize(new java.awt.Dimension(300, 32767));

        jScrollPane3.setViewportView(sugerencia);

        aplicarClasificacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/save.png"))); // NOI18N
        aplicarClasificacion.setText("Aplicar organización de archivos");
        aplicarClasificacion.setMaximumSize(new java.awt.Dimension(133, 50));
        aplicarClasificacion.setPreferredSize(new java.awt.Dimension(150, 150));
        aplicarClasificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarClasificacionActionPerformed(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Directorio de salida"));

        dirSalida.setEditable(false);
        dirSalida.setText("C:\\Users\\Alejandro\\Documents\\Organización");
        dirSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dirSalidaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(dirSalida, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dirSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout panelSugerenciaLayout = new javax.swing.GroupLayout(panelSugerencia);
        panelSugerencia.setLayout(panelSugerenciaLayout);
        panelSugerenciaLayout.setHorizontalGroup(
            panelSugerenciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelSugerenciaLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(aplicarClasificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelSugerenciaLayout.setVerticalGroup(
            panelSugerenciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSugerenciaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aplicarClasificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelTabla2.setBorder(javax.swing.BorderFactory.createTitledBorder("Archivos seleccionados para organizar"));

        solicitarSugerencia1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/back.png"))); // NOI18N
        solicitarSugerencia1.setText("Editar selección de archivos");
        solicitarSugerencia1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solicitarSugerencia1ActionPerformed(evt);
            }
        });

        tabla1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "", "Archivo", "Ruta", "Peso", "Modificacion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tabla1);

        javax.swing.GroupLayout panelTabla2Layout = new javax.swing.GroupLayout(panelTabla2);
        panelTabla2.setLayout(panelTabla2Layout);
        panelTabla2Layout.setHorizontalGroup(
            panelTabla2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTabla2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTabla2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 945, Short.MAX_VALUE)
                    .addGroup(panelTabla2Layout.createSequentialGroup()
                        .addComponent(solicitarSugerencia1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelTabla2Layout.setVerticalGroup(
            panelTabla2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTabla2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solicitarSugerencia1)
                .addContainerGap())
        );

        javax.swing.GroupLayout SugerenciaOrganizacionLayout = new javax.swing.GroupLayout(SugerenciaOrganizacion);
        SugerenciaOrganizacion.setLayout(SugerenciaOrganizacionLayout);
        SugerenciaOrganizacionLayout.setHorizontalGroup(
            SugerenciaOrganizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SugerenciaOrganizacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTabla2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSugerencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        SugerenciaOrganizacionLayout.setVerticalGroup(
            SugerenciaOrganizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SugerenciaOrganizacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SugerenciaOrganizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTabla2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSugerencia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        Tarjetas.add(SugerenciaOrganizacion, "card2");

        javax.swing.GroupLayout OrganizarLayout = new javax.swing.GroupLayout(Organizar);
        Organizar.setLayout(OrganizarLayout);
        OrganizarLayout.setHorizontalGroup(
            OrganizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OrganizarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Tarjetas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        OrganizarLayout.setVerticalGroup(
            OrganizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OrganizarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Tarjetas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Organizar", Organizar);

        busquedaArchivos.setBorder(javax.swing.BorderFactory.createTitledBorder("Busqueda de archivos"));
        busquedaArchivos.setMaximumSize(new java.awt.Dimension(270, 32767));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/search.png"))); // NOI18N
        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Seleccione criterio de búsqueda");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Buscar según los siguientes criterios:");
        jLabel3.setAutoscrolls(true);

        tarjetasBuscar.setLayout(new java.awt.CardLayout());

        jLabel2.setText("Ingrese termino a buscar");

        javax.swing.GroupLayout busquedaNoExtensionLayout = new javax.swing.GroupLayout(busquedaNoExtension);
        busquedaNoExtension.setLayout(busquedaNoExtensionLayout);
        busquedaNoExtensionLayout.setHorizontalGroup(
            busquedaNoExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(busquedaNoExtensionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(busquedaNoExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(busquedaNoExtensionLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(terminoBuscar))
                .addContainerGap())
        );
        busquedaNoExtensionLayout.setVerticalGroup(
            busquedaNoExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(busquedaNoExtensionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(terminoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tarjetasBuscar.add(busquedaNoExtension, "card2");

        jLabel4.setText("Seleccione tipo de archivo a búscar:");

        comboTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Adobe Acrobat Document (*.pdf)", "Microsoft PowerPoint Presentation (*.pptx)", "Microsoft Word Document (*.docx)", "Documento de texto (*.txt)" }));

        javax.swing.GroupLayout busquedaExtensionLayout = new javax.swing.GroupLayout(busquedaExtension);
        busquedaExtension.setLayout(busquedaExtensionLayout);
        busquedaExtensionLayout.setHorizontalGroup(
            busquedaExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(busquedaExtensionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(busquedaExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(busquedaExtensionLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(comboTipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        busquedaExtensionLayout.setVerticalGroup(
            busquedaExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(busquedaExtensionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        tarjetasBuscar.add(busquedaExtension, "card3");

        bContenido.setSelected(true);
        bContenido.setText("Búsqueda por contendio");
        bContenido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bContenidoActionPerformed(evt);
            }
        });

        bNombre.setText("Búsqueda por nombre");
        bNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNombreActionPerformed(evt);
            }
        });

        bExtension.setText("Búsqueda por tipo de documento (extensión)");
        bExtension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExtensionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout busquedaArchivosLayout = new javax.swing.GroupLayout(busquedaArchivos);
        busquedaArchivos.setLayout(busquedaArchivosLayout);
        busquedaArchivosLayout.setHorizontalGroup(
            busquedaArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tarjetasBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(busquedaArchivosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(busquedaArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(busquedaArchivosLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(busquedaArchivosLayout.createSequentialGroup()
                        .addGroup(busquedaArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bExtension)
                            .addComponent(bNombre)
                            .addComponent(bContenido)
                            .addComponent(jLabel1))
                        .addGap(0, 5, Short.MAX_VALUE))))
            .addGroup(busquedaArchivosLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        busquedaArchivosLayout.setVerticalGroup(
            busquedaArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(busquedaArchivosLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel3)
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bContenido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bExtension)
                .addGap(18, 18, 18)
                .addComponent(tarjetasBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        resultadoBusqueda.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultado de Búsqueda"));

        resBusqueda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre de archivo", "Abrir en explorador", "Abrir archivo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resBusqueda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resBusquedaMousePressed(evt);
            }
        });
        resBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                resBusquedaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(resBusqueda);

        buscarCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cancel_1.png"))); // NOI18N
        buscarCancelar.setText("Cancelar");
        buscarCancelar.setEnabled(false);

        javax.swing.GroupLayout resultadoBusquedaLayout = new javax.swing.GroupLayout(resultadoBusqueda);
        resultadoBusqueda.setLayout(resultadoBusquedaLayout);
        resultadoBusquedaLayout.setHorizontalGroup(
            resultadoBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultadoBusquedaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resultadoBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 993, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultadoBusquedaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buscarCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        resultadoBusquedaLayout.setVerticalGroup(
            resultadoBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultadoBusquedaLayout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(buscarCancelar)
                .addContainerGap())
        );

        javax.swing.GroupLayout BuscarLayout = new javax.swing.GroupLayout(Buscar);
        Buscar.setLayout(BuscarLayout);
        BuscarLayout.setHorizontalGroup(
            BuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BuscarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(busquedaArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resultadoBusqueda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        BuscarLayout.setVerticalGroup(
            BuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BuscarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultadoBusqueda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(busquedaArchivos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Búsqueda", Buscar);

        panelEstado.setBorder(javax.swing.BorderFactory.createTitledBorder("Estado"));

        labelStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelStatus.setMinimumSize(new java.awt.Dimension(10, 0));

        labelStatus1.setMinimumSize(new java.awt.Dimension(10, 0));

        javax.swing.GroupLayout panelEstadoLayout = new javax.swing.GroupLayout(panelEstado);
        panelEstado.setLayout(panelEstadoLayout);
        panelEstadoLayout.setHorizontalGroup(
            panelEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEstadoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelStatus1, javax.swing.GroupLayout.DEFAULT_SIZE, 1002, Short.MAX_VALUE)
                    .addComponent(labelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelEstadoLayout.setVerticalGroup(
            panelEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEstadoLayout.createSequentialGroup()
                .addGroup(panelEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEstadoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(labelStatus1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(progressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(panelEstado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void dirSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dirSalidaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dirSalidaActionPerformed

    private void añadirSeleccionadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadirSeleccionadoActionPerformed

        //llenarTabla(1);
        worker = new SwingWorker<Void, File[]>() {
            @Override
            protected Void doInBackground() {
                progressBar.setIndeterminate(true);
                progressBar.setVisible(true);
                tree.setEnabled(false);
                cancelar.setEnabled(true);
                añadirSeleccionado.setEnabled(false);
                gestionarColeccion();
                return null;
            }
            @Override
            protected void done() {
                llenarTabla(1);
                progressBar.setIndeterminate(false);
                cancelar.setEnabled(false);
                progressBar.setVisible(true);
                tree.setEnabled(true);
                añadirSeleccionado.setEnabled(true);
                if (seleccion.isEmpty()) {
                    descartarArchivo.setEnabled(false);
                    limpiarSeleccion.setEnabled(false);
                    solicitarSugerencia.setEnabled(false);
                } else {
                    descartarArchivo.setEnabled(true);
                    limpiarSeleccion.setEnabled(true);
                    solicitarSugerencia.setEnabled(true);
                }
                labelStatus.setText("Archivos añadidos a selección: " + seleccion.size() + " archivos");
            }
        };
        worker.execute();                
        
        
/*        
        banderaArchivosRepetidos=true;
        
        if (file==null) {
            JOptionPane.showMessageDialog(null,"No selecciono ninguna carpeta");
        } else {
            File[] files = fileSystemView.getFiles(file, true); 
            progressBar.setIndeterminate(true);
            progressBar.setVisible(true);
            tree.setEnabled(false);
            cancelar.setEnabled(true);
            añadirSeleccionado.setEnabled(false);
            //       añadirArchivo.setEnabled(false);
                                             
        }
        */

        
    }//GEN-LAST:event_añadirSeleccionadoActionPerformed
    public void agregarArchivo(File file){
        if ((file.getAbsolutePath().contains("Users") || file.getAbsolutePath().contains("Usuarios"))) {            
            if (file.isFile()) {
                if (seleccion.contains(file)) {
                    JOptionPane.showMessageDialog(null,"Este archivo ya fue selccionado");
                } else {
                    String type = fileSystemView.getSystemTypeDescription(file);
                    if (file.canRead() && !file.isHidden()) {
                                                System.out.println(type);
                        System.out.println(System.getProperty("os.name"));
                        if (type.contains("Foxit Reader PDF Document")
                                || //rtf
                                (type.contains("Rich Text Format"))
                                || //pdf
                                (type.contains("Text Document"))
                                || //pdf
                                (type.contains("TXT File"))
                                || //txt
                                type.contains("Microsoft PowerPoint Presentation")
                                || //pptx
                                type.contains("Microsoft PowerPoint 97-2003 Presentation")
                                || //ppt
                                type.contains("Microsoft Word Document")
                                || type.contains("Microsoft Word 97 - 2003 Document")) {
                            //System.out.println(type+"  :  "+files[i].getAbsolutePath());
                            seleccion.add(file);
                            labelStatus.setText("Agregando archivo: "+file.getAbsolutePath());
                        }else{
                            JOptionPane.showMessageDialog(null,"Este archivo no puede ser procesado.");
                        }
                        
                    }
                }
            }
        }
    }
    public void agregarCarpeta(File[] files) {        

        for (int i = 0; i < files.length; i++) {
            //  progressBar.setValue(i);
            //  progressBar.setStringPainted(true);
            File[] f = fileSystemView.getFiles(files[i], true);

            if ((files[i].getAbsolutePath().contains("Users") || files[i].getAbsolutePath().contains("Usuarios"))) {
                agregarCarpeta(f);                
                if (files[i].isFile()) {
                    if (seleccion.contains(files[i])) {
                        if (banderaArchivosRepetidos) {
                            banderaArchivosRepetidos=false;
                            JOptionPane.showMessageDialog(null,"Existen archivos repetidos en la seleccion los cuales no se añadiran nuevamente");
                        }
                    } else {
                        String type = fileSystemView.getSystemTypeDescription(files[i]);
                        
                        if (files[i].canRead() && !files[i].isHidden()) {
                            if (type.contains("Foxit Reader PDF Document")
                                    || //pdf
                                    (type.contains("Text Document") && !(files[i].getName()).contains(".log"))
                                    || //txt                                                           
                                    (type.contains("TXT File")&& !(files[i].getName()).contains(".log"))
                                    ||
                                    type.contains("Microsoft PowerPoint Presentation")
                                    || //rtf
                                (type.contains("Rich Text Format"))||
                                    // type.contains("Microsoft PowerPoint 97-2003 Presentation")|| //ppt
                                    type.contains("Microsoft Word Document")
                                    || type.contains("Microsoft Word 97 - 2003 Document")) {
                                //System.out.println(type+"  :  "+files[i].getAbsolutePath());                               
                                seleccion.add(files[i]);
                                labelStatus.setText("Agregando archivo: " + files[i].getAbsolutePath());
                            }
                        }
                    }
                }
            }
        }
    }
    private void limpiarSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarSeleccionActionPerformed
        // TODO add your handling code here:
        
        seleccion.clear();
        llenarTabla(1);
        //abrirArchivo.setEnabled(false);
        descartarArchivo.setEnabled(false);
        limpiarSeleccion.setEnabled(false);
        solicitarSugerencia.setEnabled(false);
    }//GEN-LAST:event_limpiarSeleccionActionPerformed

    private void aplicarClasificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarClasificacionActionPerformed
        // TODO add your handling code here:
        Object[] options = {"Mover","Copiar","Cancelar"};
        int n = JOptionPane.showOptionDialog(null,
                "¿Desea que sus archivos originales sean copiados o movidos a la nueva carpeta?",
                "Confirmación de acción de archivos",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, //do not use a custom Icon
                options, //the titles of buttons
                options[0]); //default button title
        Object[] options2 = {"Si","No","Cancelar"};
        
        int n2 = JOptionPane.showOptionDialog(null,
                "¿Realmente desea aplicar fisicamente la sugerencia de organización?",
                "Confirmacion fisica",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, //do not use a custom Icon
                options2, //the titles of buttons
                options2[0]); //default button title
        if (options[n].equals("Copiar") && options2[n2].equals("Si")) {
            for (int i = 0; i < seleccion.size(); i++) {
                try {
                    //System.out.println("Nombre de archivos:" + dataSelected.get(i).getName());
                    File directorio = new File("archivos/copiar");
                    directorio.mkdir();
                    File archivo = new File("archivos/copiar/" + seleccion.get(i).getName());
                    Files.copy(seleccion.get(i).toPath(), archivo.toPath());
                    //Files.move(dataSelected.get(i).toPath(), archivo.toPath()); 
                } catch (IOException ex) {
                    Logger.getLogger(InterfazPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            JOptionPane.showMessageDialog(null, "¡Clasificacion realizada!");
        }
        if (options[n].equals("Mover") && options2[n2].equals("Si")) {
            for (int i = 0; i < seleccion.size(); i++) {
                try {
                    //System.out.println("Nombre de archivos:" + dataSelected.get(i).getName());
                    File directorio = new File("archivos/mover");
                    directorio.mkdir();
                    File archivo = new File("archivos/mover/" + seleccion.get(i).getName());
                    //Files.copy(dataSelected.get(i).toPath(), archivo.toPath());
                    Files.move(seleccion.get(i).toPath(), archivo.toPath()); 
                } catch (IOException ex) {
                    Logger.getLogger(InterfazPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            JOptionPane.showMessageDialog(null, "¡Clasificacion realizada!");
        }
        
               
    }//GEN-LAST:event_aplicarClasificacionActionPerformed

    private void solicitarSugerenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solicitarSugerenciaActionPerformed
        // TODO add your handling code here:        
        // TODO add your handling code here:
        System.out.println("TAMAÑO: "+seleccion.size());
        
        LeerPdf pdf = new LeerPdf();
        LeerPP pptx = new LeerPP();
        LeerTexto txt = new LeerTexto();
        LeerW word = new LeerW();
        LeerRTF rtf = new LeerRTF();
        
        long cantidadPaginas=0;        
       /*  for(int i=0; i< seleccion.size(); i++){             
             String type = fileSystemView.getSystemTypeDescription(seleccion.get(i));
             System.out.println(type);
             if (type.contains("Foxit Reader PDF Document")){
                 cantidadPaginas+=seleccion.get(i).length();
             }else if(type.contains("Microsoft PowerPoint Presentation")){
                 cantidadPaginas+=seleccion.get(i).length();
             }else if(type.contains("Text Document")){
                 cantidadPaginas+=seleccion.get(i).length();
             }else if(type.contains("Rich Text Format")){
                 cantidadPaginas+=seleccion.get(i).length();
             }else if(type.contains("Microsoft Word Document")|| type.contains("Microsoft Word 97 - 2003 Document")){
                 cantidadPaginas+=seleccion.get(i).length();
             }else if (type.contains("TXT File")){
                 cantidadPaginas+=seleccion.get(i).length();
             }
                       
         }    */                
            //progressBar.setIndeterminate(true);
            solicitarSugerencia.setEnabled(false);
            coleccion.setEnabled(false);
            descartarArchivo.setEnabled(false);
            limpiarSeleccion.setEnabled(false);
            añadirSeleccionado.setEnabled(false);
            tree.setEnabled(false);
            cancelar.setEnabled(true);
            
            progressBar.setVisible(true);            
         //   progressBar.setMinimum(0);
         //   progressBar.setMaximum((int)cantidadPaginas);
            
            
            worker = new SwingWorker<Void, File[]>() {
            @Override
            protected Void doInBackground() throws IOException {
                progreso=0;
                System.out.println("TAMAÑO 2: "+seleccion.size());
                

                
                
                startTimestamp =  System.currentTimeMillis();
                
                Preprocesamiento preprocesamiento=new Preprocesamiento(seleccion);
                preprocesamiento.iniciarPreprocesamiento();
                
                clustersID = preprocesamiento.getClustersID();
                
                endTimestamp =  System.currentTimeMillis();
                
                k=preprocesamiento.getK();
                minPts=preprocesamiento.getMinPts();
                epsilon=preprocesamiento.getEpsilon();
                
                
                
                progressBar.setMinimum(0);
                progressBar1.setMinimum(0);
                return null;
            }

            @Override
            protected void done() {
                solicitarSugerencia.setEnabled(true);
                coleccion.setEnabled(true);
                descartarArchivo.setEnabled(true);
                limpiarSeleccion.setEnabled(true);
                añadirSeleccionado.setEnabled(true);
                tree.setEnabled(true);
                cancelar.setEnabled(false);
                if(!this.isCancelled()){
                    try {
                        CardLayout cl = (CardLayout) (Tarjetas.getLayout());
                        cl.previous(Tarjetas);
                        labelStatus.setText("Se Procesaron: "+contadorArchivos +" de un total de "+totalArchivos);
                        
                        File tiempo = new File(System.getProperty("user.home")+"/TT/archivos/RESULTADOS/Tiempo.txt");
                        BufferedWriter writer = null;
                        writer = new BufferedWriter(new FileWriter(tiempo,true)); //CREAMOS EL ESCRITOR
                        long pesoTotal=0;
                        for(int l=0;l<seleccion.size();l++)
                            pesoTotal+=seleccion.get(l).length();
                        String s = "--------------------------------------------\n";
                        s+= " Fecha: "+new Date().toString().trim().replaceAll(" ", "_").replace(":", ".")+" \n";
                        s+= " Num. Docs procesados: "+ contadorArchivos+"\n";
                        s+= " Tamaño total: [ "+pesoTotal+" bytes ]["+(pesoTotal/1024)+" KB]["+((pesoTotal/1024)/1024)+" MB]["+(((pesoTotal/1024)/1024)/1024)+" GB]\n";
                        s+= " Minimo de puntos: "+minPts+"\n";
                        s+= " Epsilon: "+epsilon+"\n";
                        s+= " Num de clusters obtenidos: "+k+"\n";
                        s += " Tiempo Total ~: " + (endTimestamp - startTimestamp)+" ms\n";
                        s += "--------------------------------------------\n";
                        writer.append(s);
                        writer.flush();
                        writer.close();
                        generaSugerencia(clustersID);
                    } catch (IOException ex) {
                        Logger.getLogger(InterfazPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else
                    labelStatus.setText("Se cancelo el proceso");
            }
        };
        worker.execute();
        
        
    }//GEN-LAST:event_solicitarSugerenciaActionPerformed

    private void buildTreeFromString(final DefaultTreeModel model, final String str) {
        // Fetch the root node
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

        // Split the string around the delimiter
        String [] strings = str.split("/");

        // Create a node object to use for traversing down the tree as it 
        // is being created
        DefaultMutableTreeNode node = root;

        // Iterate of the string array
        for (String s: strings) {
            // Look for the index of a node at the current level that
            // has a value equal to the current string
            int index = childIndex(node, s);

            // Index less than 0, this is a new node not currently present on the tree
            if (index < 0) {
                // Add the new node
                DefaultMutableTreeNode newChild = new DefaultMutableTreeNode(s);
                node.insert(newChild, node.getChildCount());
                node = newChild;
            }
            // Else, existing node, skip to the next string
            else {
                node = (DefaultMutableTreeNode) node.getChildAt(index);
            }
        }
    }

    /**
     * Returns the index of a child of a given node, provided its string value.
     * 
     * @param node The node to search its children
     * @param childValue The value of the child to compare with
     * @return The index
     */
    private int childIndex(final DefaultMutableTreeNode node, final String childValue) {
        Enumeration<DefaultMutableTreeNode> children = node.children();
        DefaultMutableTreeNode child = null;
        int index = -1;

        while (children.hasMoreElements() && index < 0) {
            child = children.nextElement();

            if (child.getUserObject() != null && childValue.equals(child.getUserObject())) {
                index = node.getIndex(child);
            }
        }

        return index;
    }
    public void generaSugerencia(List<ClusterWithMeanID> clustersID){
        
        String hora = new Date().toString().trim().replaceAll(" ", "_").replace(":", ".");
        
       DefaultMutableTreeNode root = new DefaultMutableTreeNode("DENDOGRAMA_" + hora );

        // Create the tree model and add the root node to it
        DefaultTreeModel model = new DefaultTreeModel(root);

        // Create the tree with the new model
           sugerencia.setModel(model);
        // Build the tree from the various string samples
        for (ClusterWithMeanID clustersID1 : clustersID) {
                System.out.println( clustersID1.getId());
               buildTreeFromString(model, clustersID1.getId().replace('\\', '/'));
               
               if (clustersID1.getVectors().size() >= 1) {

                //  if (clustersID.get(i).isHoja()) {
                for (int w = 0; w < clustersID1.getVectors().size(); w++) {
                    buildTreeFromString(model,  clustersID1.getId().replace('\\', '/') + "/" + clustersID1.getVectors().get(w).getNombreArchivo());//File(ficheros[x]+".txt");//CREAMOS ARCHIVO CON NOMBRE ORIGINAL PERO EN TXT
                    //    clustersID.get(i).getVectors().remove(clustersID.get(i).getVectors().size());                   
                }
               }
        }
        /*
        hora = new Date().toString().trim().replaceAll(" ", "_").replace(":", ".");
        String ruta = System.getProperty("user.home") + "\\TT\\DENDOGRAMAS\\DENDOGRAMA_" + hora + "_1\\";
        System.out.println(ruta);
        File c = new File(ruta);
        c.mkdirs();

        for (int i = 0; i < clustersID.size(); i++) {
            System.out.println(clustersID.get(i).getId() + " - " + clustersID.get(i).getVectors());
            System.out.println("" + clustersID.get(i).isHoja());
            // if (clustersID.get(i).isHoja()) 
            for (int j = 0; j < clustersID.get(i).getVectors().size(); j++) {
                System.out.println("-----" + clustersID.get(i).getVectors().get(j).getNombreArchivo());
            }
            c = new File(ruta + clustersID.get(i).getId() + "/");//File(ficheros[x]+".txt");//CREAMOS ARCHIVO CON NOMBRE ORIGINAL PERO EN TXT
            c.mkdirs();

            if (clustersID.get(i).getVectors().size() >= 1) {

                //  if (clustersID.get(i).isHoja()) {
                for (int w = 0; w < clustersID.get(i).getVectors().size(); w++) {
                    c = new File(ruta + clustersID.get(i).getId() + "/" + clustersID.get(i).getVectors().get(w).getNombreArchivo());//File(ficheros[x]+".txt");//CREAMOS ARCHIVO CON NOMBRE ORIGINAL PERO EN TXT
                    //    clustersID.get(i).getVectors().remove(clustersID.get(i).getVectors().size());

                    try {
                        c.createNewFile();
                    } catch (IOException ex) {
                      
                    }
                }
                        //c=new File(ruta+clustersID.get(i).getId()+"/"+clustersID.get(i).getVectors().get(0).getNombreArchivo());//File(ficheros[x]+".txt");//CREAMOS ARCHIVO CON NOMBRE ORIGINAL PERO EN TXT

                //   }
            } else {

            }
        }
        */

    }
    public void procesarArchivo(File doc,LeerPdf pdf,LeerPP pptx,LeerTexto txt,LeerW word,LeerRTF rtf, String status){

                    contadorArchivos++;
                    String type = fileSystemView.getSystemTypeDescription(doc);
                   
                    progreso += (int) doc.length();
                    progressBar.setValue(progreso);
                    progressBar.setStringPainted(true);
                    //labelStatus.setText("Extrayendo texto: " + doc.getAbsolutePath());
                    labelStatus.setText(status);
                    if (type.contains("Foxit Reader PDF Document")) {
                        pdf.lecturaPDF(doc);
                    } else if (type.contains("Microsoft PowerPoint Presentation")) {
                        pptx.LeerPowerPoint(doc);
                    } else if (type.contains("Text Document")) {
                        txt.LeerTexto(doc);
                    }else if(type.contains("Rich Text Format")){
                        rtf.LeerRTF(doc);
                    }else if(type.contains("Microsoft Word Document")|| type.contains("Microsoft Word 97 - 2003 Document")){
                        word.LeerWord(doc);
                    }else if (type.contains("TXT File")){
                        txt.LeerTexto(doc);
                    }
    
    }
    private void descartarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descartarArchivoActionPerformed
        // TODO add your handling code here:
        if(coleccion.getSelectedColumn()==-1)
            JOptionPane.showMessageDialog(null,"¡No selecciono ningn archivo!");
        else{                
            Object[] options = {"Si","No"};
               int n = JOptionPane.showOptionDialog(null,
                "¿Desea descartar el archivo "+coleccion.getValueAt(coleccion.getSelectedRow(), 1)+"?",
                "Confirmación para descartar archivo",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, //do not use a custom Icon
                options, //the titles of buttons
                options[0]); //default button title
               if(n==0){
                        File file= new File(""+coleccion.getValueAt(coleccion.getSelectedRow(), 2));
                        seleccion.remove(file);
                        llenarTabla(1);
                                            if(seleccion.isEmpty()){
          //      abrirArchivo.setEnabled(false);
                descartarArchivo.setEnabled(false);
                limpiarSeleccion.setEnabled(false);
                solicitarSugerencia.setEnabled(false);
            }else{
            //    abrirArchivo.setEnabled(true);
                descartarArchivo.setEnabled(true);
                limpiarSeleccion.setEnabled(true);
                solicitarSugerencia.setEnabled(true);
            }
                    }
        }
        
    }//GEN-LAST:event_descartarArchivoActionPerformed

    private void solicitarSugerencia1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solicitarSugerencia1ActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) (Tarjetas.getLayout());
        cl.previous(Tarjetas);
    }//GEN-LAST:event_solicitarSugerencia1ActionPerformed

    private void treeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMousePressed
        // TODO add your handling code here:
        tree.grabFocus();
        
               if (evt.getClickCount() == 2 && !evt.isConsumed()) {
                    evt.consume();
                    System.out.println("Double Click");
                    if (file.isFile()) {                      
                        try{                          
                            Desktop.getDesktop().open(file);
                        } catch (Exception e) {
                            //error
                        }
                    } 
            }        
     
    }//GEN-LAST:event_treeMousePressed

    private void treeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_treeMouseClicked

    private void coleccionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_coleccionKeyPressed
        // TODO add your handling code here:
        if (coleccion.getValueAt(coleccion.getSelectedRow(), 1) != null) {
            if (evt.getKeyCode() == 127) {
                if (coleccion.getSelectedColumn() == -1) {
                    JOptionPane.showMessageDialog(null, "¡No selecciono ningn archivo!");
                } else {
                    Object[] options = {"Si", "No"};
                    int n = JOptionPane.showOptionDialog(null,
                            "¿Desea descartar el archivo " + coleccion.getValueAt(coleccion.getSelectedRow(), 1) + "?",
                            "Confirmación para descartar archivo",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null, //do not use a custom Icon
                            options, //the titles of buttons
                            options[0]); //default button title
                    if(n==0){
                        File file= new File(""+coleccion.getValueAt(coleccion.getSelectedRow(), 2));
                        seleccion.remove(file);
                        llenarTabla(1);
                                            if(seleccion.isEmpty()){
          //      abrirArchivo.setEnabled(false);
                descartarArchivo.setEnabled(false);
                limpiarSeleccion.setEnabled(false);
                solicitarSugerencia.setEnabled(false);
            }else{
            //    abrirArchivo.setEnabled(true);
                descartarArchivo.setEnabled(true);
                limpiarSeleccion.setEnabled(true);
                solicitarSugerencia.setEnabled(true);
            }
                    }
                }
            } else {
            }
        }
    }//GEN-LAST:event_coleccionKeyPressed

    private void treeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_treeKeyPressed
        // TODO add your handling code here:  
        tree.grabFocus();
          if (evt.getKeyCode() == 10) {
          if (file.isFile()) {                      
                        try{                          
                            Desktop.getDesktop().open(file);
                        } catch (Exception e) {
                            //error
                        }
                    } 
          }
    }//GEN-LAST:event_treeKeyPressed

    private void treeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_treeKeyReleased
        // TODO add your handling code here:
   
        tree.grabFocus();
    }//GEN-LAST:event_treeKeyReleased

    private void treeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_treeFocusLost
        // TODO add your handling code here:
        //tree.requestFocus();
    }//GEN-LAST:event_treeFocusLost

    private void treeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMouseEntered
        // TODO add your handling code here:
             
    }//GEN-LAST:event_treeMouseEntered

    private void treeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_treeKeyTyped
        // TODO add your handling code here:
        tree.grabFocus();
    }//GEN-LAST:event_treeKeyTyped

    private void añadirSeleccionadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_añadirSeleccionadoFocusGained
        // TODO add your handling code here:
        tree.grabFocus();
    }//GEN-LAST:event_añadirSeleccionadoFocusGained

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        // TODO add your handling code here:
        progressBar.setValue(0);
        progressBar1.setValue(0);
        if(!worker.isCancelled())
            worker.cancel(true);
        if(!workerArbol.isCancelled())
            workerArbol.cancel(true);
        
    }//GEN-LAST:event_cancelarActionPerformed

    private void bContenidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bContenidoActionPerformed
        // TODO add your handling code here:
        JRadioButton rd = (JRadioButton)evt.getSource();
        CardLayout cl = (CardLayout) (tarjetasBuscar.getLayout());
        if(bExtension.isSelected())
            terminoBuscar.setText("-");
        else
            terminoBuscar.setText("");
        if(rd.isSelected()){
            bNombre.setSelected(false);
            bExtension.setSelected(false);
            cl.first(tarjetasBuscar);
            
        }

    }//GEN-LAST:event_bContenidoActionPerformed

    private void bNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNombreActionPerformed
        // TODO add your handling code here:
        JRadioButton rd = (JRadioButton) evt.getSource();
        CardLayout cl = (CardLayout) (tarjetasBuscar.getLayout());
        if(bExtension.isSelected())
            terminoBuscar.setText("-");
        else
            terminoBuscar.setText("");
        if (rd.isSelected()) {
            bContenido.setSelected(false);
            bExtension.setSelected(false);
            cl.first(tarjetasBuscar);
        }
    }//GEN-LAST:event_bNombreActionPerformed

    private void bExtensionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExtensionActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) (tarjetasBuscar.getLayout());
        JRadioButton rd = (JRadioButton) evt.getSource();
        if(bExtension.isSelected())
            terminoBuscar.setText("-");
        else
            terminoBuscar.setText("");
        if (rd.isSelected()) {
            bNombre.setSelected(false);
            bContenido.setSelected(false);
            cl.last(tarjetasBuscar);
        }
    }//GEN-LAST:event_bExtensionActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        realizarBusqueda(terminoBuscar.getText());
        llenarTabla(2);
        

        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void resBusquedaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_resBusquedaKeyPressed
        // TODO add your handling code here:
        File file= new File(""+resBusqueda.getValueAt(resBusqueda.getSelectedRow(), 2));
        tree.grabFocus();
          if (evt.getKeyCode() == 10) {
          if (file.isFile()) {                      
                        try{                          
                            Desktop.getDesktop().open(file);
                        } catch (Exception e) {
                            //error
                        }
                    } 
          }
    }//GEN-LAST:event_resBusquedaKeyPressed

    private void resBusquedaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resBusquedaMousePressed
        // TODO add your handling code here:
        File file= new File(""+resBusqueda.getValueAt(resBusqueda.getSelectedRow(), 2));
                       if (evt.getClickCount() == 2 && !evt.isConsumed()) {
                    evt.consume();
                    System.out.println("Double Click");
                    if (file.isFile()) {                      
                        try{                          
                            Desktop.getDesktop().open(file);
                        } catch (Exception e) {
                            //error
                        }
                    } 
            } 
    }//GEN-LAST:event_resBusquedaMousePressed
     /** Update the table on the EDT */
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            if(System.getProperty("os.name").toLowerCase().contains("win")){
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Windows".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;     
                    }
                }
            }else{
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("GTKLookAndFeel".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;     
                    }
                }
            
            
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {                
                InterfazPrincipal f = new InterfazPrincipal();
                f.setVisible(true);
            }
        });
    }
    public void arbolVirtual() {

        DefaultMutableTreeNode category = null;
        DefaultMutableTreeNode book = null;
        
        book = new DefaultMutableTreeNode("Campana.txt");
        category = new DefaultMutableTreeNode("Desktop");
        
        category.add(book);
        sugerencia.setModel(new DefaultTreeModel(category));
        
    }
    public void invocaProceso(){
    
    }
    public void inicializarArbol() {
        
        seleccion.clear();
        fileSystemView = FileSystemView.getFileSystemView();
        DefaultMutableTreeNode root = new DefaultMutableTreeNode();
        
        treeModel=null;
        treeModel = new DefaultTreeModel(root);
        System.out.println(treeModel.getRoot().toString());
        TreeSelectionListener treeSelectionListener = new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent tse) {
                DefaultMutableTreeNode node
                        = (DefaultMutableTreeNode) tse.getPath().getLastPathComponent();
                nodoActual= node;
                mostrarHijos(node);
            }
        };
        File[] roots = fileSystemView.getFiles(fileSystemView.getParentDirectory(new File(System.getProperty("user.home")) ), rootPaneCheckingEnabled);
        System.out.println(System.getProperty("user.user"));
        System.out.println(roots.length);
        for (File fileSystemRoot : roots) {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(fileSystemRoot);
            root.add(node);
            File[] files = fileSystemView.getFiles(fileSystemRoot, true);
            for (File file : files) {
                node.add(new DefaultMutableTreeNode(file));            
            }
        }
        tree.setModel(treeModel);
        tree.setRootVisible(false);
        tree.addTreeSelectionListener(treeSelectionListener);
        tree.setCellRenderer(new ModeloArbol());
        tree.expandRow(0);
        tree.setVisibleRowCount(15);
        panelEntrada.setVisible(true);
    }
    public void llenarTabla(int ident){
                    
        File[]  files =new File[seleccion.size()];
        File[]  files2 =new File[resulBusqueda.size()];
        
        if(ident==1){           
            for(int i=0; i< seleccion.size(); i++)
                 files[i] = seleccion.get(i);
         } else if(ident==2){
             for (int i = 0; i < resulBusqueda.size(); i++) {
                 files2[i] = resulBusqueda.get(i);
             }
         }
         //  System.out.println("-"+files[i].getAbsolutePath());

         SwingUtilities.invokeLater(new Runnable() {
             @Override
             public void run() {
                 modelotabla=null;
                 if (modelotabla == null) {
                     
                     modelotabla = new ModeloTabla();
                     if(ident==1){
                        coleccion.setModel(modelotabla);
                        tabla1.setModel(modelotabla);
                     }else if(ident==2)
                        resBusqueda.setModel(modelotabla);
                 }
                 if(ident==1)
                    modelotabla.setFiles(files);
                 else if(ident==2)
                    modelotabla.setFiles(files2);
                 
                 coleccion.getColumnModel().getColumn(0).setPreferredWidth(50);



             }
         });

        
    
    }
    public void mostrarHijos(final DefaultMutableTreeNode node) {

        tree.setEnabled(false);
        progressBar.setVisible(true);
        progressBar.setIndeterminate(true);

        workerArbol = new SwingWorker<Void, File>() {
            @Override
            public Void doInBackground() {
                file = (File) node.getUserObject();
                if (file.isDirectory()) {
                    File[] files = fileSystemView.getFiles(file, true); //!!
                    if (node.isLeaf()) {
                        for (File child : files) {
                            //    if (child.isDirectory()) {
                            publish(child);
                        }
                        // }
                    }
                }
                return null;
            }

            @Override
            protected void process(List<File> chunks) {
                for (File child : chunks) {
                    node.add(new DefaultMutableTreeNode(child));
                }
            }

            @Override
            protected void done() {
                progressBar.setIndeterminate(false);
                progressBar.setVisible(true);
                tree.setEnabled(true);
            }
        };
        workerArbol.execute();

    }
 //   Coleccion realizarBusqueda(String termino){
 //   
 //   }
    public boolean hayArchivoSeleccionado(){
        return file != null;
    }
    public void SolicitarSugerencia(){
    
    }
    public boolean campoTextoVacio(String termino){
        return termino.isEmpty();
    }
    public void realizarBusqueda(String termino){
        if(!campoTextoVacio(termino)){
            resulBusqueda.clear();
            if(bContenido.isSelected())
                resulBusqueda=(controlador.realizaBusqueda(termino,1,0));
            else if(bNombre.isSelected())
                resulBusqueda=(controlador.realizaBusqueda(termino,2,0));
            else if(bExtension.isSelected())
                resulBusqueda=(controlador.realizaBusqueda(termino,3,comboTipo.getSelectedIndex()));
            else
                JOptionPane.showMessageDialog(null,"MSJEX. Tipo de busqueda");
            if(resulBusqueda.isEmpty())
                JOptionPane.showMessageDialog(null,"MSJEX. Busqueda sin resultado");
        
        }else{
            JOptionPane.showMessageDialog(null,"MSJEX. Campo de Texto vacio");
        
        }
    
    }
    public void gestionarColeccion(){
        
        if(hayArchivoSeleccionado()){             
            int resultado= controlador.gestionarColeccion(file);
            if(resultado==1){
                JOptionPane.showMessageDialog(null,"MSJE6. Tipo de archivo invalido");
            }else if(resultado==2){
                JOptionPane.showMessageDialog(null,"MSJE9. Documento a añadir ya fue seleccionado.");
            }else{
                seleccion = controlador.retornarColeccion();
            }
        }else{
            JOptionPane.showMessageDialog(null,"MSJE3. No hay archivo seleccionado");
        }
    
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Buscar;
    private javax.swing.JPanel GestionArchivos;
    private javax.swing.JPanel Organizar;
    private javax.swing.JPanel SugerenciaOrganizacion;
    private javax.swing.JPanel Tarjetas;
    private javax.swing.JButton aplicarClasificacion;
    private javax.swing.JButton añadirSeleccionado;
    private javax.swing.JRadioButton bContenido;
    private javax.swing.JRadioButton bExtension;
    private javax.swing.JRadioButton bNombre;
    private javax.swing.JButton buscarCancelar;
    private javax.swing.JPanel busquedaArchivos;
    private javax.swing.JPanel busquedaExtension;
    private javax.swing.JPanel busquedaNoExtension;
    private javax.swing.JButton cancelar;
    private javax.swing.JTable coleccion;
    private javax.swing.JComboBox<String> comboTipo;
    private javax.swing.JButton descartarArchivo;
    private javax.swing.JTextField dirSalida;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    public static javax.swing.JLabel labelStatus;
    public static javax.swing.JLabel labelStatus1;
    private javax.swing.JButton limpiarSeleccion;
    private javax.swing.JPanel panelEntrada;
    private javax.swing.JPanel panelEstado;
    private javax.swing.JPanel panelSugerencia;
    private javax.swing.JPanel panelTabla;
    private javax.swing.JPanel panelTabla2;
    public static javax.swing.JProgressBar progressBar;
    public static javax.swing.JProgressBar progressBar1;
    private javax.swing.JTable resBusqueda;
    private javax.swing.JPanel resultadoBusqueda;
    private javax.swing.JButton solicitarSugerencia;
    private javax.swing.JButton solicitarSugerencia1;
    private javax.swing.JTree sugerencia;
    private javax.swing.JTable tabla1;
    private javax.swing.JPanel tarjetasBuscar;
    private javax.swing.JTextField terminoBuscar;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables

    
    
    @Override
    public void valueChanged(TreeSelectionEvent e) {
        throw new UnsupportedOperationException("No soportado."); 
    }


    
   



}

